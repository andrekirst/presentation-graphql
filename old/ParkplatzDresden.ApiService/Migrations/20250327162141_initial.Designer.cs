// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkplatzDresden.ApiService.Database;

#nullable disable

namespace ParkplatzDresden.ApiService.Migrations
{
    [DbContext(typeof(ParkplatzDbContext))]
    [Migration("20250327162141_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Operator");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Free")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParkingStateId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Total")
                        .HasColumnType("integer");

                    b.Property<string>("Trend")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ParkingStateId");

                    b.HasIndex("RegionId");

                    b.ToTable("ParkAreas");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkingSlotsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Free")
                        .HasColumnType("integer");

                    b.Property<int>("ParkAreaId")
                        .HasColumnType("integer");

                    b.Property<int?>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkAreaId");

                    b.ToTable("ParkingSlotsHistories");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkingState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParkingState");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkArea", b =>
                {
                    b.HasOne("ParkplatzDresden.ApiService.Models.Database.Operator", "Operator")
                        .WithMany("ParkAreas")
                        .HasForeignKey("OperatorId");

                    b.HasOne("ParkplatzDresden.ApiService.Models.Database.ParkingState", "ParkingState")
                        .WithMany("ParkAreas")
                        .HasForeignKey("ParkingStateId");

                    b.HasOne("ParkplatzDresden.ApiService.Models.Database.Region", "Region")
                        .WithMany("ParkAreas")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ParkplatzDresden.ApiService.Models.Database.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ParkAreaId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Number")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("Street")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("ParkAreaId");

                            b1.ToTable("ParkAreas");

                            b1.WithOwner()
                                .HasForeignKey("ParkAreaId");

                            b1.OwnsOne("ParkplatzDresden.ApiService.Models.Database.Location", "Location", b2 =>
                                {
                                    b2.Property<int>("AddressParkAreaId")
                                        .HasColumnType("integer");

                                    b2.Property<double?>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double?>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressParkAreaId");

                                    b2.ToTable("ParkAreas");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressParkAreaId");
                                });

                            b1.Navigation("Location");
                        });

                    b.OwnsOne("ParkplatzDresden.ApiService.Models.Database.ServiceTime", "ServiceTime", b1 =>
                        {
                            b1.Property<int>("ParkAreaId")
                                .HasColumnType("integer");

                            b1.Property<TimeOnly?>("Closing")
                                .HasColumnType("time without time zone");

                            b1.Property<bool>("IsAllDayOpen")
                                .HasColumnType("boolean");

                            b1.Property<TimeOnly?>("Opening")
                                .HasColumnType("time without time zone");

                            b1.HasKey("ParkAreaId");

                            b1.ToTable("ParkAreas");

                            b1.WithOwner()
                                .HasForeignKey("ParkAreaId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Operator");

                    b.Navigation("ParkingState");

                    b.Navigation("Region");

                    b.Navigation("ServiceTime");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkingSlotsHistory", b =>
                {
                    b.HasOne("ParkplatzDresden.ApiService.Models.Database.ParkArea", "ParkArea")
                        .WithMany("ParkingSlotsHistory")
                        .HasForeignKey("ParkAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkArea");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.Operator", b =>
                {
                    b.Navigation("ParkAreas");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkArea", b =>
                {
                    b.Navigation("ParkingSlotsHistory");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.ParkingState", b =>
                {
                    b.Navigation("ParkAreas");
                });

            modelBuilder.Entity("ParkplatzDresden.ApiService.Models.Database.Region", b =>
                {
                    b.Navigation("ParkAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
