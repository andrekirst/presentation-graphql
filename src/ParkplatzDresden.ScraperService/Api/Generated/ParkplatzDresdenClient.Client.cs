// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public static partial class ParkplatzDresdenClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ScraperService.Api.State.ParkplatzDresdenClientStoreAccessor> AddParkplatzDresdenClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ScraperService.Api.State.ParkplatzDresdenClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.UpdateParkAreaMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.ParkplatzDresdenClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.IParkplatzDresdenClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ScraperService.Api.State.ParkplatzDresdenClientStoreAccessor>("ParkplatzDresdenClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ParkplatzDresdenClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.Api.ParkAreaUpdatedPayloadTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.Api.ParkAreaInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.Api.ParkingSlotsInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.Api.IUpdateParkAreaResult>, global::ScraperService.Api.State.UpdateParkAreaResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.Api.IUpdateParkAreaResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.IUpdateParkAreaMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.Api.IUpdateParkAreaResult>, global::ScraperService.Api.State.UpdateParkAreaBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ScraperService.Api.IUpdateParkAreaResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ScraperService.Api.IUpdateParkAreaResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.Api.IUpdateParkAreaResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.Api.UpdateParkAreaMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.Api.IUpdateParkAreaMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.UpdateParkAreaMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ScraperService.Api.State.ParkplatzDresdenClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.Api.ParkplatzDresdenClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.Api.IParkplatzDresdenClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.Api.ParkplatzDresdenClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace ScraperService.Api
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaResult : global::System.IEquatable<UpdateParkAreaResult>, IUpdateParkAreaResult
    {
        public UpdateParkAreaResult(global::ScraperService.Api.IUpdateParkArea_UpdateParkArea updateParkArea)
        {
            UpdateParkArea = updateParkArea;
        }

        public global::ScraperService.Api.IUpdateParkArea_UpdateParkArea UpdateParkArea { get; }

        public virtual global::System.Boolean Equals(UpdateParkAreaResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdateParkArea.Equals(other.UpdateParkArea));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateParkAreaResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdateParkArea.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload : global::System.IEquatable<UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload>, IUpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload
    {
        public UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload(global::ScraperService.Api.ParkAreaUpdatedPayloadType type)
        {
            Type = type;
        }

        public global::ScraperService.Api.ParkAreaUpdatedPayloadType Type { get; }

        public virtual global::System.Boolean Equals(UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial interface IUpdateParkAreaResult
    {
        public global::ScraperService.Api.IUpdateParkArea_UpdateParkArea UpdateParkArea { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial interface IUpdateParkArea_UpdateParkArea
    {
        public global::ScraperService.Api.ParkAreaUpdatedPayloadType Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial interface IUpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload : IUpdateParkArea_UpdateParkArea
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkAreaInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _parkingSlotsInputFormatter = default !;
        public global::System.String TypeName => "ParkAreaInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _parkingSlotsInputFormatter = serializerResolver.GetInputValueFormatter("ParkingSlotsInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ScraperService.Api.ParkAreaInput;
            var inputInfo = runtimeValue as global::ScraperService.Api.State.IParkAreaInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsDisplayNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("displayName", FormatDisplayName(input.DisplayName)));
            }

            if (inputInfo.IsParkingSlotsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("parkingSlots", FormatParkingSlots(input.ParkingSlots)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatDisplayName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatParkingSlots(global::ScraperService.Api.ParkingSlotsInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _parkingSlotsInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkAreaInput : global::ScraperService.Api.State.IParkAreaInputInfo, global::System.IEquatable<ParkAreaInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ParkAreaInput)obj);
        }

        public virtual global::System.Boolean Equals(ParkAreaInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && DisplayName.Equals(other.DisplayName) && ((ParkingSlots is null && other.ParkingSlots is null) || ParkingSlots != null && ParkingSlots.Equals(other.ParkingSlots));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * DisplayName.GetHashCode();
                if (ParkingSlots != null)
                {
                    hash ^= 397 * ParkingSlots.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_displayName = default !;
        private global::System.Boolean _set_displayName;
        private global::ScraperService.Api.ParkingSlotsInput? _value_parkingSlots;
        private global::System.Boolean _set_parkingSlots;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkAreaInputInfo.IsIdSet => _set_id;

        public global::System.String DisplayName
        {
            get => _value_displayName;
            set
            {
                _set_displayName = true;
                _value_displayName = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkAreaInputInfo.IsDisplayNameSet => _set_displayName;

        public global::ScraperService.Api.ParkingSlotsInput? ParkingSlots
        {
            get => _value_parkingSlots;
            set
            {
                _set_parkingSlots = true;
                _value_parkingSlots = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkAreaInputInfo.IsParkingSlotsSet => _set_parkingSlots;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkingSlotsInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "ParkingSlotsInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ScraperService.Api.ParkingSlotsInput;
            var inputInfo = runtimeValue as global::ScraperService.Api.State.IParkingSlotsInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsTotalSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("total", FormatTotal(input.Total)));
            }

            if (inputInfo.IsFreeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("free", FormatFree(input.Free)));
            }

            if (inputInfo.IsUsedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("used", FormatUsed(input.Used)));
            }

            return fields;
        }

        private global::System.Object? FormatTotal(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFree(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUsed(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkingSlotsInput : global::ScraperService.Api.State.IParkingSlotsInputInfo, global::System.IEquatable<ParkingSlotsInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ParkingSlotsInput)obj);
        }

        public virtual global::System.Boolean Equals(ParkingSlotsInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Total, other.Total)) && global::System.Object.Equals(Free, other.Free) && global::System.Object.Equals(Used, other.Used);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Total != null)
                {
                    hash ^= 397 * Total.GetHashCode();
                }

                if (Free != null)
                {
                    hash ^= 397 * Free.GetHashCode();
                }

                if (Used != null)
                {
                    hash ^= 397 * Used.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32? _value_total;
        private global::System.Boolean _set_total;
        private global::System.Int32? _value_free;
        private global::System.Boolean _set_free;
        private global::System.Int32? _value_used;
        private global::System.Boolean _set_used;
        public global::System.Int32? Total
        {
            get => _value_total;
            set
            {
                _set_total = true;
                _value_total = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkingSlotsInputInfo.IsTotalSet => _set_total;

        public global::System.Int32? Free
        {
            get => _value_free;
            set
            {
                _set_free = true;
                _value_free = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkingSlotsInputInfo.IsFreeSet => _set_free;

        public global::System.Int32? Used
        {
            get => _value_used;
            set
            {
                _set_used = true;
                _value_used = value;
            }
        }

        global::System.Boolean global::ScraperService.Api.State.IParkingSlotsInputInfo.IsUsedSet => _set_used;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public enum ParkAreaUpdatedPayloadType
    {
        Unchanged,
        Created,
        Updated
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkAreaUpdatedPayloadTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ParkAreaUpdatedPayloadType>
    {
        public global::System.String TypeName => "ParkAreaUpdatedPayloadType";

        public ParkAreaUpdatedPayloadType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "UNCHANGED" => ParkAreaUpdatedPayloadType.Unchanged,
                "CREATED" => ParkAreaUpdatedPayloadType.Created,
                "UPDATED" => ParkAreaUpdatedPayloadType.Updated,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum ParkAreaUpdatedPayloadType")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ParkAreaUpdatedPayloadType.Unchanged => "UNCHANGED",
                ParkAreaUpdatedPayloadType.Created => "CREATED",
                ParkAreaUpdatedPayloadType.Updated => "UPDATED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum ParkAreaUpdatedPayloadType value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateParkArea GraphQL operation
    /// <code>
    /// mutation UpdateParkArea($parkArea: ParkAreaInput!) {
    ///   updateParkArea(parkArea: $parkArea) {
    ///     __typename
    ///     type
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateParkAreaMutationDocument()
        {
        }

        public static UpdateParkAreaMutationDocument Instance { get; } = new UpdateParkAreaMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x28,
            0x24,
            0x70,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x3a,
            0x20,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x28,
            0x70,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7ea779c12bea4b61870006605e77a777");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateParkArea GraphQL operation
    /// <code>
    /// mutation UpdateParkArea($parkArea: ParkAreaInput!) {
    ///   updateParkArea(parkArea: $parkArea) {
    ///     __typename
    ///     type
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaMutation : global::ScraperService.Api.IUpdateParkAreaMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateParkAreaResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _parkAreaInputFormatter;
        public UpdateParkAreaMutation(global::StrawberryShake.IOperationExecutor<IUpdateParkAreaResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _parkAreaInputFormatter = serializerResolver.GetInputValueFormatter("ParkAreaInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateParkAreaResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateParkAreaResult>> ExecuteAsync(global::ScraperService.Api.ParkAreaInput parkArea, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(parkArea);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateParkAreaResult>> Watch(global::ScraperService.Api.ParkAreaInput parkArea, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(parkArea);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ScraperService.Api.ParkAreaInput parkArea)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("parkArea", FormatParkArea(parkArea));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateParkAreaMutationDocument.Instance.Hash.Value, name: "UpdateParkArea", document: UpdateParkAreaMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatParkArea(global::ScraperService.Api.ParkAreaInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _parkAreaInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateParkArea GraphQL operation
    /// <code>
    /// mutation UpdateParkArea($parkArea: ParkAreaInput!) {
    ///   updateParkArea(parkArea: $parkArea) {
    ///     __typename
    ///     type
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial interface IUpdateParkAreaMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateParkAreaResult>> ExecuteAsync(global::ScraperService.Api.ParkAreaInput parkArea, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateParkAreaResult>> Watch(global::ScraperService.Api.ParkAreaInput parkArea, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ParkplatzDresdenClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkplatzDresdenClient : global::ScraperService.Api.IParkplatzDresdenClient
    {
        private readonly global::ScraperService.Api.IUpdateParkAreaMutation _updateParkArea;
        public ParkplatzDresdenClient(global::ScraperService.Api.IUpdateParkAreaMutation updateParkArea)
        {
            _updateParkArea = updateParkArea ?? throw new global::System.ArgumentNullException(nameof(updateParkArea));
        }

        public static global::System.String ClientName => "ParkplatzDresdenClient";
        public global::ScraperService.Api.IUpdateParkAreaMutation UpdateParkArea => _updateParkArea;
    }

    /// <summary>
    /// Represents the ParkplatzDresdenClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial interface IParkplatzDresdenClient
    {
        global::ScraperService.Api.IUpdateParkAreaMutation UpdateParkArea { get; }
    }
}

namespace ScraperService.Api.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.Api.UpdateParkAreaResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateParkAreaResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ScraperService.Api.IUpdateParkAreaResult);

        public UpdateParkAreaResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateParkAreaResultInfo info)
            {
                return new UpdateParkAreaResult(MapNonNullableIUpdateParkArea_UpdateParkArea(info.UpdateParkArea, snapshot));
            }

            throw new global::System.ArgumentException("UpdateParkAreaResultInfo expected.");
        }

        private global::ScraperService.Api.IUpdateParkArea_UpdateParkArea MapNonNullableIUpdateParkArea_UpdateParkArea(global::ScraperService.Api.State.ParkAreaUpdatedPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateParkArea_UpdateParkArea returnValue = default !;
            if (data.__typename.Equals("ParkAreaUpdatedPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateParkArea_UpdateParkArea_ParkAreaUpdatedPayload(data.Type ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateParkAreaResultInfo(global::ScraperService.Api.State.ParkAreaUpdatedPayloadData updateParkArea, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateParkArea = updateParkArea;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ScraperService.Api.State.ParkAreaUpdatedPayloadData UpdateParkArea { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateParkAreaResultInfo(UpdateParkArea, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    internal interface IParkAreaInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsDisplayNameSet { get; }

        global::System.Boolean IsParkingSlotsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    internal interface IParkingSlotsInputInfo
    {
        global::System.Boolean IsTotalSet { get; }

        global::System.Boolean IsFreeSet { get; }

        global::System.Boolean IsUsedSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class UpdateParkAreaBuilder : global::StrawberryShake.OperationResultBuilder<global::ScraperService.Api.IUpdateParkAreaResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ScraperService.Api.ParkAreaUpdatedPayloadType> _parkAreaUpdatedPayloadTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateParkAreaBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.Api.IUpdateParkAreaResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _parkAreaUpdatedPayloadTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::ScraperService.Api.ParkAreaUpdatedPayloadType>("ParkAreaUpdatedPayloadType") ?? throw new global::System.ArgumentException("No serializer for type `ParkAreaUpdatedPayloadType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.Api.IUpdateParkAreaResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new UpdateParkAreaResultInfo(Deserialize_NonNullableIUpdateParkArea_UpdateParkArea(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateParkArea")), entityIds, snapshot.Version);
        }

        private global::ScraperService.Api.State.ParkAreaUpdatedPayloadData Deserialize_NonNullableIUpdateParkArea_UpdateParkArea(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ParkAreaUpdatedPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ScraperService.Api.State.ParkAreaUpdatedPayloadData(typename, type: Deserialize_NonNullableParkAreaUpdatedPayloadType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ScraperService.Api.ParkAreaUpdatedPayloadType Deserialize_NonNullableParkAreaUpdatedPayloadType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _parkAreaUpdatedPayloadTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkAreaUpdatedPayloadData
    {
        public ParkAreaUpdatedPayloadData(global::System.String __typename, global::ScraperService.Api.ParkAreaUpdatedPayloadType? type = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Type = type;
        }

        public global::System.String __typename { get; }
        public global::ScraperService.Api.ParkAreaUpdatedPayloadType? Type { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkplatzDresdenClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.1.0")]
    public partial class ParkplatzDresdenClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ParkplatzDresdenClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
