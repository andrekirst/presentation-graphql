// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public static partial class ParkplatzClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ScraperService.GraphQL.State.ParkplatzClientStoreAccessor> AddParkplatzClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ScraperService.GraphQL.State.ParkplatzClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.AddParkAreaMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.GetParkAreaByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.ParkplatzClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.IParkplatzClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ScraperService.GraphQL.State.ParkplatzClientStoreAccessor>("ParkplatzClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ParkplatzClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ScraperService.GraphQL.State.ParkAreaEntity, global::ScraperService.GraphQL.GetParkAreaById_ParkAreaById_ParkArea>, global::ScraperService.GraphQL.State.GetParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.GraphQL.ChangeStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.GraphQL.AddParkAreaPayloadInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ScraperService.GraphQL.LocationInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IAddParkAreaResult>, global::ScraperService.GraphQL.State.AddParkAreaResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IAddParkAreaResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.IAddParkAreaMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IAddParkAreaResult>, global::ScraperService.GraphQL.State.AddParkAreaBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ScraperService.GraphQL.IAddParkAreaResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IAddParkAreaResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IAddParkAreaResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.AddParkAreaMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.IAddParkAreaMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.AddParkAreaMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IGetParkAreaByIdResult>, global::ScraperService.GraphQL.State.GetParkAreaByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IGetParkAreaByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.IGetParkAreaByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IGetParkAreaByIdResult>, global::ScraperService.GraphQL.State.GetParkAreaByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ScraperService.GraphQL.IGetParkAreaByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IGetParkAreaByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ScraperService.GraphQL.IGetParkAreaByIdResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.GetParkAreaByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.IGetParkAreaByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.GetParkAreaByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ScraperService.GraphQL.State.ParkplatzClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.ParkplatzClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ScraperService.GraphQL.IParkplatzClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ScraperService.GraphQL.ParkplatzClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace ScraperService.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaResult : global::System.IEquatable<AddParkAreaResult>, IAddParkAreaResult
    {
        public AddParkAreaResult(global::ScraperService.GraphQL.IAddParkArea_AddParkArea addParkArea)
        {
            AddParkArea = addParkArea;
        }

        public global::ScraperService.GraphQL.IAddParkArea_AddParkArea AddParkArea { get; }

        public virtual global::System.Boolean Equals(AddParkAreaResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddParkArea.Equals(other.AddParkArea));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddParkAreaResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddParkArea.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkArea_AddParkArea_ParkAreaAddedPayload : global::System.IEquatable<AddParkArea_AddParkArea_ParkAreaAddedPayload>, IAddParkArea_AddParkArea_ParkAreaAddedPayload
    {
        public AddParkArea_AddParkArea_ParkAreaAddedPayload(global::ScraperService.GraphQL.ChangeStatus changeStatus)
        {
            ChangeStatus = changeStatus;
        }

        public global::ScraperService.GraphQL.ChangeStatus ChangeStatus { get; }

        public virtual global::System.Boolean Equals(AddParkArea_AddParkArea_ParkAreaAddedPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ChangeStatus.Equals(other.ChangeStatus));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddParkArea_AddParkArea_ParkAreaAddedPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ChangeStatus.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IAddParkAreaResult
    {
        public global::ScraperService.GraphQL.IAddParkArea_AddParkArea AddParkArea { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IAddParkArea_AddParkArea
    {
        public global::ScraperService.GraphQL.ChangeStatus ChangeStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IAddParkArea_AddParkArea_ParkAreaAddedPayload : IAddParkArea_AddParkArea
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdResult : global::System.IEquatable<GetParkAreaByIdResult>, IGetParkAreaByIdResult
    {
        public GetParkAreaByIdResult(global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById parkAreaById)
        {
            ParkAreaById = parkAreaById;
        }

        public global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById ParkAreaById { get; }

        public virtual global::System.Boolean Equals(GetParkAreaByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ParkAreaById.Equals(other.ParkAreaById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetParkAreaByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ParkAreaById.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaById_ParkAreaById_ParkArea : global::System.IEquatable<GetParkAreaById_ParkAreaById_ParkArea>, IGetParkAreaById_ParkAreaById_ParkArea
    {
        public GetParkAreaById_ParkAreaById_ParkArea(global::System.String displayName, global::System.DateTimeOffset? lastUpdate, global::System.Int32? total, global::System.Int32? free, global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories> parkingSlotHistories)
        {
            DisplayName = displayName;
            LastUpdate = lastUpdate;
            Total = total;
            Free = free;
            ParkingSlotHistories = parkingSlotHistories;
        }

        public global::System.String DisplayName { get; }
        public global::System.DateTimeOffset? LastUpdate { get; }
        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories> ParkingSlotHistories { get; }

        public virtual global::System.Boolean Equals(GetParkAreaById_ParkAreaById_ParkArea? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DisplayName.Equals(other.DisplayName)) && ((LastUpdate is null && other.LastUpdate is null) || LastUpdate != null && LastUpdate.Equals(other.LastUpdate)) && global::System.Object.Equals(Total, other.Total) && global::System.Object.Equals(Free, other.Free) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(ParkingSlotHistories, other.ParkingSlotHistories);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetParkAreaById_ParkAreaById_ParkArea)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DisplayName.GetHashCode();
                if (LastUpdate != null)
                {
                    hash ^= 397 * LastUpdate.GetHashCode();
                }

                if (Total != null)
                {
                    hash ^= 397 * Total.GetHashCode();
                }

                if (Free != null)
                {
                    hash ^= 397 * Free.GetHashCode();
                }

                foreach (var ParkingSlotHistories_elm in ParkingSlotHistories)
                {
                    hash ^= 397 * ParkingSlotHistories_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory : global::System.IEquatable<GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory>, IGetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory
    {
        public GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory(global::System.Int32? total, global::System.Int32? free)
        {
            Total = total;
            Free = free;
        }

        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }

        public virtual global::System.Boolean Equals(GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Total, other.Total)) && global::System.Object.Equals(Free, other.Free);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Total != null)
                {
                    hash ^= 397 * Total.GetHashCode();
                }

                if (Free != null)
                {
                    hash ^= 397 * Free.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaByIdResult
    {
        public global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById ParkAreaById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaById_ParkAreaById
    {
        public global::System.String DisplayName { get; }
        public global::System.DateTimeOffset? LastUpdate { get; }
        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories> ParkingSlotHistories { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaById_ParkAreaById_ParkArea : IGetParkAreaById_ParkAreaById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaById_ParkAreaById_ParkingSlotHistories
    {
        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory : IGetParkAreaById_ParkAreaById_ParkingSlotHistories
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaPayloadInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _locationInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localTimeFormatter = default !;
        public global::System.String TypeName => "AddParkAreaPayloadInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _locationInputFormatter = serializerResolver.GetInputValueFormatter("LocationInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _localTimeFormatter = serializerResolver.GetInputValueFormatter("LocalTime");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ScraperService.GraphQL.AddParkAreaPayloadInput;
            var inputInfo = runtimeValue as global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsParkAreaIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("parkAreaId", FormatParkAreaId(input.ParkAreaId)));
            }

            if (inputInfo.IsDisplayNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("displayName", FormatDisplayName(input.DisplayName)));
            }

            if (inputInfo.IsLastUpdateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdate", FormatLastUpdate(input.LastUpdate)));
            }

            if (inputInfo.IsTotalSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("total", FormatTotal(input.Total)));
            }

            if (inputInfo.IsFreeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("free", FormatFree(input.Free)));
            }

            if (inputInfo.IsParkingStateNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("parkingStateName", FormatParkingStateName(input.ParkingStateName)));
            }

            if (inputInfo.IsParkingStateIconSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("parkingStateIcon", FormatParkingStateIcon(input.ParkingStateIcon)));
            }

            if (inputInfo.IsOperatorWebsiteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("operatorWebsite", FormatOperatorWebsite(input.OperatorWebsite)));
            }

            if (inputInfo.IsOperatorEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("operatorEmail", FormatOperatorEmail(input.OperatorEmail)));
            }

            if (inputInfo.IsAddressStreetSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("addressStreet", FormatAddressStreet(input.AddressStreet)));
            }

            if (inputInfo.IsAddressNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("addressNumber", FormatAddressNumber(input.AddressNumber)));
            }

            if (inputInfo.IsAddressPostalCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("addressPostalCode", FormatAddressPostalCode(input.AddressPostalCode)));
            }

            if (inputInfo.IsAddressCitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("addressCity", FormatAddressCity(input.AddressCity)));
            }

            if (inputInfo.IsLocationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("location", FormatLocation(input.Location)));
            }

            if (inputInfo.IsServiceTimeIsAllDayOpenSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("serviceTimeIsAllDayOpen", FormatServiceTimeIsAllDayOpen(input.ServiceTimeIsAllDayOpen)));
            }

            if (inputInfo.IsServiceTimeOpeningSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("serviceTimeOpening", FormatServiceTimeOpening(input.ServiceTimeOpening)));
            }

            if (inputInfo.IsServiceTimeClosingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("serviceTimeClosing", FormatServiceTimeClosing(input.ServiceTimeClosing)));
            }

            if (inputInfo.IsRegionDisplayNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("regionDisplayName", FormatRegionDisplayName(input.RegionDisplayName)));
            }

            return fields;
        }

        private global::System.Object? FormatParkAreaId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatDisplayName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatLastUpdate(global::System.DateTimeOffset input)
        {
            return _dateTimeFormatter.Format(input);
        }

        private global::System.Object? FormatTotal(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFree(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatParkingStateName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatParkingStateIcon(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOperatorWebsite(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOperatorEmail(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddressStreet(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddressNumber(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddressPostalCode(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddressCity(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLocation(global::ScraperService.GraphQL.LocationInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _locationInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatServiceTimeIsAllDayOpen(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatServiceTimeOpening(global::System.TimeOnly? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatServiceTimeClosing(global::System.TimeOnly? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRegionDisplayName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaPayloadInput : global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo, global::System.IEquatable<AddParkAreaPayloadInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddParkAreaPayloadInput)obj);
        }

        public virtual global::System.Boolean Equals(AddParkAreaPayloadInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(ParkAreaId, other.ParkAreaId)) && DisplayName.Equals(other.DisplayName) && LastUpdate.Equals(other.LastUpdate) && global::System.Object.Equals(Total, other.Total) && global::System.Object.Equals(Free, other.Free) && ((ParkingStateName is null && other.ParkingStateName is null) || ParkingStateName != null && ParkingStateName.Equals(other.ParkingStateName)) && ((ParkingStateIcon is null && other.ParkingStateIcon is null) || ParkingStateIcon != null && ParkingStateIcon.Equals(other.ParkingStateIcon)) && ((OperatorWebsite is null && other.OperatorWebsite is null) || OperatorWebsite != null && OperatorWebsite.Equals(other.OperatorWebsite)) && ((OperatorEmail is null && other.OperatorEmail is null) || OperatorEmail != null && OperatorEmail.Equals(other.OperatorEmail)) && ((AddressStreet is null && other.AddressStreet is null) || AddressStreet != null && AddressStreet.Equals(other.AddressStreet)) && ((AddressNumber is null && other.AddressNumber is null) || AddressNumber != null && AddressNumber.Equals(other.AddressNumber)) && ((AddressPostalCode is null && other.AddressPostalCode is null) || AddressPostalCode != null && AddressPostalCode.Equals(other.AddressPostalCode)) && ((AddressCity is null && other.AddressCity is null) || AddressCity != null && AddressCity.Equals(other.AddressCity)) && ((Location is null && other.Location is null) || Location != null && Location.Equals(other.Location)) && global::System.Object.Equals(ServiceTimeIsAllDayOpen, other.ServiceTimeIsAllDayOpen) && ((ServiceTimeOpening is null && other.ServiceTimeOpening is null) || ServiceTimeOpening != null && ServiceTimeOpening.Equals(other.ServiceTimeOpening)) && ((ServiceTimeClosing is null && other.ServiceTimeClosing is null) || ServiceTimeClosing != null && ServiceTimeClosing.Equals(other.ServiceTimeClosing)) && RegionDisplayName.Equals(other.RegionDisplayName);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ParkAreaId.GetHashCode();
                hash ^= 397 * DisplayName.GetHashCode();
                hash ^= 397 * LastUpdate.GetHashCode();
                if (Total != null)
                {
                    hash ^= 397 * Total.GetHashCode();
                }

                if (Free != null)
                {
                    hash ^= 397 * Free.GetHashCode();
                }

                if (ParkingStateName != null)
                {
                    hash ^= 397 * ParkingStateName.GetHashCode();
                }

                if (ParkingStateIcon != null)
                {
                    hash ^= 397 * ParkingStateIcon.GetHashCode();
                }

                if (OperatorWebsite != null)
                {
                    hash ^= 397 * OperatorWebsite.GetHashCode();
                }

                if (OperatorEmail != null)
                {
                    hash ^= 397 * OperatorEmail.GetHashCode();
                }

                if (AddressStreet != null)
                {
                    hash ^= 397 * AddressStreet.GetHashCode();
                }

                if (AddressNumber != null)
                {
                    hash ^= 397 * AddressNumber.GetHashCode();
                }

                if (AddressPostalCode != null)
                {
                    hash ^= 397 * AddressPostalCode.GetHashCode();
                }

                if (AddressCity != null)
                {
                    hash ^= 397 * AddressCity.GetHashCode();
                }

                if (Location != null)
                {
                    hash ^= 397 * Location.GetHashCode();
                }

                hash ^= 397 * ServiceTimeIsAllDayOpen.GetHashCode();
                if (ServiceTimeOpening != null)
                {
                    hash ^= 397 * ServiceTimeOpening.GetHashCode();
                }

                if (ServiceTimeClosing != null)
                {
                    hash ^= 397 * ServiceTimeClosing.GetHashCode();
                }

                hash ^= 397 * RegionDisplayName.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_parkAreaId;
        private global::System.Boolean _set_parkAreaId;
        private global::System.String _value_displayName = default !;
        private global::System.Boolean _set_displayName;
        private global::System.DateTimeOffset _value_lastUpdate;
        private global::System.Boolean _set_lastUpdate;
        private global::System.Int32? _value_total;
        private global::System.Boolean _set_total;
        private global::System.Int32? _value_free;
        private global::System.Boolean _set_free;
        private global::System.String? _value_parkingStateName;
        private global::System.Boolean _set_parkingStateName;
        private global::System.String? _value_parkingStateIcon;
        private global::System.Boolean _set_parkingStateIcon;
        private global::System.String? _value_operatorWebsite;
        private global::System.Boolean _set_operatorWebsite;
        private global::System.String? _value_operatorEmail;
        private global::System.Boolean _set_operatorEmail;
        private global::System.String? _value_addressStreet;
        private global::System.Boolean _set_addressStreet;
        private global::System.String? _value_addressNumber;
        private global::System.Boolean _set_addressNumber;
        private global::System.String? _value_addressPostalCode;
        private global::System.Boolean _set_addressPostalCode;
        private global::System.String? _value_addressCity;
        private global::System.Boolean _set_addressCity;
        private global::ScraperService.GraphQL.LocationInput? _value_location;
        private global::System.Boolean _set_location;
        private global::System.Boolean _value_serviceTimeIsAllDayOpen;
        private global::System.Boolean _set_serviceTimeIsAllDayOpen;
        private global::System.TimeOnly? _value_serviceTimeOpening;
        private global::System.Boolean _set_serviceTimeOpening;
        private global::System.TimeOnly? _value_serviceTimeClosing;
        private global::System.Boolean _set_serviceTimeClosing;
        private global::System.String _value_regionDisplayName = default !;
        private global::System.Boolean _set_regionDisplayName;
        public global::System.Int32 ParkAreaId
        {
            get => _value_parkAreaId;
            set
            {
                _set_parkAreaId = true;
                _value_parkAreaId = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsParkAreaIdSet => _set_parkAreaId;

        public global::System.String DisplayName
        {
            get => _value_displayName;
            set
            {
                _set_displayName = true;
                _value_displayName = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsDisplayNameSet => _set_displayName;

        public global::System.DateTimeOffset LastUpdate
        {
            get => _value_lastUpdate;
            set
            {
                _set_lastUpdate = true;
                _value_lastUpdate = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsLastUpdateSet => _set_lastUpdate;

        public global::System.Int32? Total
        {
            get => _value_total;
            set
            {
                _set_total = true;
                _value_total = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsTotalSet => _set_total;

        public global::System.Int32? Free
        {
            get => _value_free;
            set
            {
                _set_free = true;
                _value_free = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsFreeSet => _set_free;

        public global::System.String? ParkingStateName
        {
            get => _value_parkingStateName;
            set
            {
                _set_parkingStateName = true;
                _value_parkingStateName = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsParkingStateNameSet => _set_parkingStateName;

        public global::System.String? ParkingStateIcon
        {
            get => _value_parkingStateIcon;
            set
            {
                _set_parkingStateIcon = true;
                _value_parkingStateIcon = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsParkingStateIconSet => _set_parkingStateIcon;

        public global::System.String? OperatorWebsite
        {
            get => _value_operatorWebsite;
            set
            {
                _set_operatorWebsite = true;
                _value_operatorWebsite = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsOperatorWebsiteSet => _set_operatorWebsite;

        public global::System.String? OperatorEmail
        {
            get => _value_operatorEmail;
            set
            {
                _set_operatorEmail = true;
                _value_operatorEmail = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsOperatorEmailSet => _set_operatorEmail;

        public global::System.String? AddressStreet
        {
            get => _value_addressStreet;
            set
            {
                _set_addressStreet = true;
                _value_addressStreet = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsAddressStreetSet => _set_addressStreet;

        public global::System.String? AddressNumber
        {
            get => _value_addressNumber;
            set
            {
                _set_addressNumber = true;
                _value_addressNumber = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsAddressNumberSet => _set_addressNumber;

        public global::System.String? AddressPostalCode
        {
            get => _value_addressPostalCode;
            set
            {
                _set_addressPostalCode = true;
                _value_addressPostalCode = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsAddressPostalCodeSet => _set_addressPostalCode;

        public global::System.String? AddressCity
        {
            get => _value_addressCity;
            set
            {
                _set_addressCity = true;
                _value_addressCity = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsAddressCitySet => _set_addressCity;

        public global::ScraperService.GraphQL.LocationInput? Location
        {
            get => _value_location;
            set
            {
                _set_location = true;
                _value_location = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsLocationSet => _set_location;

        public global::System.Boolean ServiceTimeIsAllDayOpen
        {
            get => _value_serviceTimeIsAllDayOpen;
            set
            {
                _set_serviceTimeIsAllDayOpen = true;
                _value_serviceTimeIsAllDayOpen = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsServiceTimeIsAllDayOpenSet => _set_serviceTimeIsAllDayOpen;

        public global::System.TimeOnly? ServiceTimeOpening
        {
            get => _value_serviceTimeOpening;
            set
            {
                _set_serviceTimeOpening = true;
                _value_serviceTimeOpening = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsServiceTimeOpeningSet => _set_serviceTimeOpening;

        public global::System.TimeOnly? ServiceTimeClosing
        {
            get => _value_serviceTimeClosing;
            set
            {
                _set_serviceTimeClosing = true;
                _value_serviceTimeClosing = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsServiceTimeClosingSet => _set_serviceTimeClosing;

        public global::System.String RegionDisplayName
        {
            get => _value_regionDisplayName;
            set
            {
                _set_regionDisplayName = true;
                _value_regionDisplayName = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.IAddParkAreaPayloadInputInfo.IsRegionDisplayNameSet => _set_regionDisplayName;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class LocationInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        public global::System.String TypeName => "LocationInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ScraperService.GraphQL.LocationInput;
            var inputInfo = runtimeValue as global::ScraperService.GraphQL.State.ILocationInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsLatitudeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("latitude", FormatLatitude(input.Latitude)));
            }

            if (inputInfo.IsLongituteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("longitute", FormatLongitute(input.Longitute)));
            }

            return fields;
        }

        private global::System.Object? FormatLatitude(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatLongitute(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class LocationInput : global::ScraperService.GraphQL.State.ILocationInputInfo, global::System.IEquatable<LocationInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((LocationInput)obj);
        }

        public virtual global::System.Boolean Equals(LocationInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Latitude, other.Latitude)) && global::System.Object.Equals(Longitute, other.Longitute);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Latitude.GetHashCode();
                hash ^= 397 * Longitute.GetHashCode();
                return hash;
            }
        }

        private global::System.Double _value_latitude;
        private global::System.Boolean _set_latitude;
        private global::System.Double _value_longitute;
        private global::System.Boolean _set_longitute;
        public global::System.Double Latitude
        {
            get => _value_latitude;
            set
            {
                _set_latitude = true;
                _value_latitude = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.ILocationInputInfo.IsLatitudeSet => _set_latitude;

        public global::System.Double Longitute
        {
            get => _value_longitute;
            set
            {
                _set_longitute = true;
                _value_longitute = value;
            }
        }

        global::System.Boolean global::ScraperService.GraphQL.State.ILocationInputInfo.IsLongituteSet => _set_longitute;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public enum ChangeStatus
    {
        Unmodified,
        Created,
        Modified
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ChangeStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ChangeStatus>
    {
        public global::System.String TypeName => "ChangeStatus";

        public ChangeStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "UNMODIFIED" => ChangeStatus.Unmodified,
                "CREATED" => ChangeStatus.Created,
                "MODIFIED" => ChangeStatus.Modified,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum ChangeStatus")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ChangeStatus.Unmodified => "UNMODIFIED",
                ChangeStatus.Created => "CREATED",
                ChangeStatus.Modified => "MODIFIED",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum ChangeStatus value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the AddParkArea GraphQL operation
    /// <code>
    /// mutation AddParkArea($payload: AddParkAreaPayloadInput!) {
    ///   addParkArea(payload: $payload) {
    ///     __typename
    ///     changeStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaMutationDocument : global::StrawberryShake.IDocument
    {
        private AddParkAreaMutationDocument()
        {
        }

        public static AddParkAreaMutationDocument Instance { get; } = new AddParkAreaMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x64,
            0x64,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x28,
            0x24,
            0x70,
            0x61,
            0x79,
            0x6c,
            0x6f,
            0x61,
            0x64,
            0x3a,
            0x20,
            0x41,
            0x64,
            0x64,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x50,
            0x61,
            0x79,
            0x6c,
            0x6f,
            0x61,
            0x64,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x64,
            0x64,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x28,
            0x70,
            0x61,
            0x79,
            0x6c,
            0x6f,
            0x61,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x61,
            0x79,
            0x6c,
            0x6f,
            0x61,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x53,
            0x74,
            0x61,
            0x74,
            0x75,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e37ce47602fc634d18b2f0e3698fa440");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddParkArea GraphQL operation
    /// <code>
    /// mutation AddParkArea($payload: AddParkAreaPayloadInput!) {
    ///   addParkArea(payload: $payload) {
    ///     __typename
    ///     changeStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaMutation : global::ScraperService.GraphQL.IAddParkAreaMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddParkAreaResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _addParkAreaPayloadInputFormatter;
        public AddParkAreaMutation(global::StrawberryShake.IOperationExecutor<IAddParkAreaResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _addParkAreaPayloadInputFormatter = serializerResolver.GetInputValueFormatter("AddParkAreaPayloadInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddParkAreaResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddParkAreaResult>> ExecuteAsync(global::ScraperService.GraphQL.AddParkAreaPayloadInput payload, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(payload);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddParkAreaResult>> Watch(global::ScraperService.GraphQL.AddParkAreaPayloadInput payload, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(payload);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ScraperService.GraphQL.AddParkAreaPayloadInput payload)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("payload", FormatPayload(payload));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddParkAreaMutationDocument.Instance.Hash.Value, name: "AddParkArea", document: AddParkAreaMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPayload(global::ScraperService.GraphQL.AddParkAreaPayloadInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _addParkAreaPayloadInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddParkArea GraphQL operation
    /// <code>
    /// mutation AddParkArea($payload: AddParkAreaPayloadInput!) {
    ///   addParkArea(payload: $payload) {
    ///     __typename
    ///     changeStatus
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IAddParkAreaMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddParkAreaResult>> ExecuteAsync(global::ScraperService.GraphQL.AddParkAreaPayloadInput payload, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddParkAreaResult>> Watch(global::ScraperService.GraphQL.AddParkAreaPayloadInput payload, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetParkAreaById GraphQL operation
    /// <code>
    /// query GetParkAreaById($id: Int!) {
    ///   parkAreaById(id: $id) {
    ///     __typename
    ///     displayName
    ///     lastUpdate
    ///     total
    ///     free
    ///     parkingSlotHistories {
    ///       __typename
    ///       total
    ///       free
    ///     }
    ///     ... on ParkArea {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetParkAreaByIdQueryDocument()
        {
        }

        public static GetParkAreaByIdQueryDocument Instance { get; } = new GetParkAreaByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x24,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x70,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x42,
            0x79,
            0x49,
            0x64,
            0x28,
            0x69,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6c,
            0x61,
            0x73,
            0x74,
            0x55,
            0x70,
            0x64,
            0x61,
            0x74,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x20,
            0x66,
            0x72,
            0x65,
            0x65,
            0x20,
            0x70,
            0x61,
            0x72,
            0x6b,
            0x69,
            0x6e,
            0x67,
            0x53,
            0x6c,
            0x6f,
            0x74,
            0x48,
            0x69,
            0x73,
            0x74,
            0x6f,
            0x72,
            0x69,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x20,
            0x66,
            0x72,
            0x65,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x61,
            0x72,
            0x6b,
            0x41,
            0x72,
            0x65,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "00c7b92cd172eafe63f2f6949dd8a2b4");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetParkAreaById GraphQL operation
    /// <code>
    /// query GetParkAreaById($id: Int!) {
    ///   parkAreaById(id: $id) {
    ///     __typename
    ///     displayName
    ///     lastUpdate
    ///     total
    ///     free
    ///     parkingSlotHistories {
    ///       __typename
    ///       total
    ///       free
    ///     }
    ///     ... on ParkArea {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdQuery : global::ScraperService.GraphQL.IGetParkAreaByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetParkAreaByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetParkAreaByIdQuery(global::StrawberryShake.IOperationExecutor<IGetParkAreaByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetParkAreaByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetParkAreaByIdResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetParkAreaByIdResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetParkAreaByIdQueryDocument.Instance.Hash.Value, name: "GetParkAreaById", document: GetParkAreaByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetParkAreaById GraphQL operation
    /// <code>
    /// query GetParkAreaById($id: Int!) {
    ///   parkAreaById(id: $id) {
    ///     __typename
    ///     displayName
    ///     lastUpdate
    ///     total
    ///     free
    ///     parkingSlotHistories {
    ///       __typename
    ///       total
    ///       free
    ///     }
    ///     ... on ParkArea {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IGetParkAreaByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetParkAreaByIdResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetParkAreaByIdResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ParkplatzClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkplatzClient : global::ScraperService.GraphQL.IParkplatzClient
    {
        private readonly global::ScraperService.GraphQL.IAddParkAreaMutation _addParkArea;
        private readonly global::ScraperService.GraphQL.IGetParkAreaByIdQuery _getParkAreaById;
        public ParkplatzClient(global::ScraperService.GraphQL.IAddParkAreaMutation addParkArea, global::ScraperService.GraphQL.IGetParkAreaByIdQuery getParkAreaById)
        {
            _addParkArea = addParkArea ?? throw new global::System.ArgumentNullException(nameof(addParkArea));
            _getParkAreaById = getParkAreaById ?? throw new global::System.ArgumentNullException(nameof(getParkAreaById));
        }

        public static global::System.String ClientName => "ParkplatzClient";
        public global::ScraperService.GraphQL.IAddParkAreaMutation AddParkArea => _addParkArea;
        public global::ScraperService.GraphQL.IGetParkAreaByIdQuery GetParkAreaById => _getParkAreaById;
    }

    /// <summary>
    /// Represents the ParkplatzClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial interface IParkplatzClient
    {
        global::ScraperService.GraphQL.IAddParkAreaMutation AddParkArea { get; }

        global::ScraperService.GraphQL.IGetParkAreaByIdQuery GetParkAreaById { get; }
    }
}

namespace ScraperService.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkAreaEntity
    {
        public ParkAreaEntity(global::System.String displayName = default !, global::System.DateTimeOffset? lastUpdate = default !, global::System.Int32? total = default !, global::System.Int32? free = default !, global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.State.ParkingSlotHistoryData> parkingSlotHistories = default !)
        {
            DisplayName = displayName;
            LastUpdate = lastUpdate;
            Total = total;
            Free = free;
            ParkingSlotHistories = parkingSlotHistories;
        }

        public global::System.String DisplayName { get; }
        public global::System.DateTimeOffset? LastUpdate { get; }
        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }
        public global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.State.ParkingSlotHistoryData> ParkingSlotHistories { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.AddParkAreaResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddParkAreaResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ScraperService.GraphQL.IAddParkAreaResult);

        public AddParkAreaResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddParkAreaResultInfo info)
            {
                return new AddParkAreaResult(MapNonNullableIAddParkArea_AddParkArea(info.AddParkArea, snapshot));
            }

            throw new global::System.ArgumentException("AddParkAreaResultInfo expected.");
        }

        private global::ScraperService.GraphQL.IAddParkArea_AddParkArea MapNonNullableIAddParkArea_AddParkArea(global::ScraperService.GraphQL.State.ParkAreaAddedPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddParkArea_AddParkArea returnValue = default !;
            if (data.__typename.Equals("ParkAreaAddedPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddParkArea_AddParkArea_ParkAreaAddedPayload(data.ChangeStatus ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddParkAreaResultInfo(global::ScraperService.GraphQL.State.ParkAreaAddedPayloadData addParkArea, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddParkArea = addParkArea;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ScraperService.GraphQL.State.ParkAreaAddedPayloadData AddParkArea { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddParkAreaResultInfo(AddParkArea, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.GetParkAreaByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ScraperService.GraphQL.State.ParkAreaEntity, GetParkAreaById_ParkAreaById_ParkArea> _getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper;
        public GetParkAreaByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ScraperService.GraphQL.State.ParkAreaEntity, GetParkAreaById_ParkAreaById_ParkArea> getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper = getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ScraperService.GraphQL.IGetParkAreaByIdResult);

        public GetParkAreaByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetParkAreaByIdResultInfo info)
            {
                return new GetParkAreaByIdResult(MapNonNullableIGetParkAreaById_ParkAreaById(info.ParkAreaById, snapshot));
            }

            throw new global::System.ArgumentException("GetParkAreaByIdResultInfo expected.");
        }

        private global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById MapNonNullableIGetParkAreaById_ParkAreaById(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ParkArea", global::System.StringComparison.Ordinal))
            {
                return _getParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper.Map(snapshot.GetEntity<global::ScraperService.GraphQL.State.ParkAreaEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetParkAreaByIdResultInfo(global::StrawberryShake.EntityId parkAreaById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ParkAreaById = parkAreaById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId ParkAreaById { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetParkAreaByIdResultInfo(ParkAreaById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    internal interface IAddParkAreaPayloadInputInfo
    {
        global::System.Boolean IsParkAreaIdSet { get; }

        global::System.Boolean IsDisplayNameSet { get; }

        global::System.Boolean IsLastUpdateSet { get; }

        global::System.Boolean IsTotalSet { get; }

        global::System.Boolean IsFreeSet { get; }

        global::System.Boolean IsParkingStateNameSet { get; }

        global::System.Boolean IsParkingStateIconSet { get; }

        global::System.Boolean IsOperatorWebsiteSet { get; }

        global::System.Boolean IsOperatorEmailSet { get; }

        global::System.Boolean IsAddressStreetSet { get; }

        global::System.Boolean IsAddressNumberSet { get; }

        global::System.Boolean IsAddressPostalCodeSet { get; }

        global::System.Boolean IsAddressCitySet { get; }

        global::System.Boolean IsLocationSet { get; }

        global::System.Boolean IsServiceTimeIsAllDayOpenSet { get; }

        global::System.Boolean IsServiceTimeOpeningSet { get; }

        global::System.Boolean IsServiceTimeClosingSet { get; }

        global::System.Boolean IsRegionDisplayNameSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    internal interface ILocationInputInfo
    {
        global::System.Boolean IsLatitudeSet { get; }

        global::System.Boolean IsLongituteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class AddParkAreaBuilder : global::StrawberryShake.OperationResultBuilder<global::ScraperService.GraphQL.IAddParkAreaResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::ScraperService.GraphQL.ChangeStatus> _changeStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.TimeOnly> _localTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public AddParkAreaBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IAddParkAreaResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _changeStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::ScraperService.GraphQL.ChangeStatus>("ChangeStatus") ?? throw new global::System.ArgumentException("No serializer for type `ChangeStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _localTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.TimeOnly>("LocalTime") ?? throw new global::System.ArgumentException("No serializer for type `LocalTime` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IAddParkAreaResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new AddParkAreaResultInfo(Deserialize_NonNullableIAddParkArea_AddParkArea(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addParkArea")), entityIds, snapshot.Version);
        }

        private global::ScraperService.GraphQL.State.ParkAreaAddedPayloadData Deserialize_NonNullableIAddParkArea_AddParkArea(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ParkAreaAddedPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ScraperService.GraphQL.State.ParkAreaAddedPayloadData(typename, changeStatus: Deserialize_NonNullableChangeStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeStatus")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::ScraperService.GraphQL.ChangeStatus Deserialize_NonNullableChangeStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _changeStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaByIdBuilder : global::StrawberryShake.OperationResultBuilder<global::ScraperService.GraphQL.IGetParkAreaByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetParkAreaByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IGetParkAreaByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ScraperService.GraphQL.IGetParkAreaByIdResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId parkAreaByIdId = default !;
            _entityStore.Update(session =>
            {
                parkAreaByIdId = Update_NonNullableIGetParkAreaById_ParkAreaByIdEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parkAreaById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetParkAreaByIdResultInfo(parkAreaByIdId, entityIds, snapshot.Version);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetParkAreaById_ParkAreaByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ParkArea", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ScraperService.GraphQL.State.ParkAreaEntity? entity))
                {
                    session.SetEntity(entityId, new global::ScraperService.GraphQL.State.ParkAreaEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "displayName")), Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdate")), Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "total")), Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "free")), Deserialize_NonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistoriesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parkingSlotHistories"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ScraperService.GraphQL.State.ParkAreaEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "displayName")), Deserialize_DateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdate")), Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "total")), Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "free")), Deserialize_NonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistoriesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parkingSlotHistories"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? Deserialize_DateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.State.ParkingSlotHistoryData> Deserialize_NonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistoriesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var parkingSlotHistorys = new global::System.Collections.Generic.List<global::ScraperService.GraphQL.State.ParkingSlotHistoryData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                parkingSlotHistorys.Add(Deserialize_NonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistories(child));
            }

            return parkingSlotHistorys;
        }

        private global::ScraperService.GraphQL.State.ParkingSlotHistoryData Deserialize_NonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistories(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ParkingSlotHistory", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ScraperService.GraphQL.State.ParkingSlotHistoryData(typename, total: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "total")), free: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "free")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkAreaAddedPayloadData
    {
        public ParkAreaAddedPayloadData(global::System.String __typename, global::ScraperService.GraphQL.ChangeStatus? changeStatus = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ChangeStatus = changeStatus;
        }

        public global::System.String __typename { get; }
        public global::ScraperService.GraphQL.ChangeStatus? ChangeStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkingSlotHistoryData
    {
        public ParkingSlotHistoryData(global::System.String __typename, global::System.Int32? total = default !, global::System.Int32? free = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Total = total;
            Free = free;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? Total { get; }
        public global::System.Int32? Free { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class GetParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper : global::StrawberryShake.IEntityMapper<global::ScraperService.GraphQL.State.ParkAreaEntity, GetParkAreaById_ParkAreaById_ParkArea>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetParkAreaById_ParkAreaById_ParkAreaFromParkAreaEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetParkAreaById_ParkAreaById_ParkArea Map(global::ScraperService.GraphQL.State.ParkAreaEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetParkAreaById_ParkAreaById_ParkArea(entity.DisplayName, entity.LastUpdate, entity.Total, entity.Free, MapNonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistoriesNonNullableArray(entity.ParkingSlotHistories, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories> MapNonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistoriesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ScraperService.GraphQL.State.ParkingSlotHistoryData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var parkingSlotHistorys = new global::System.Collections.Generic.List<global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories>();
            foreach (global::ScraperService.GraphQL.State.ParkingSlotHistoryData child in list)
            {
                parkingSlotHistorys.Add(MapNonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistories(child, snapshot));
            }

            return parkingSlotHistorys;
        }

        private global::ScraperService.GraphQL.IGetParkAreaById_ParkAreaById_ParkingSlotHistories MapNonNullableIGetParkAreaById_ParkAreaById_ParkingSlotHistories(global::ScraperService.GraphQL.State.ParkingSlotHistoryData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetParkAreaById_ParkAreaById_ParkingSlotHistories returnValue = default !;
            if (data.__typename.Equals("ParkingSlotHistory", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetParkAreaById_ParkAreaById_ParkingSlotHistories_ParkingSlotHistory(data.Total, data.Free);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkplatzClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "ParkArea" => ParseParkAreaEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "ParkArea" => FormatParkAreaEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseParkAreaEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatParkAreaEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.3.0")]
    public partial class ParkplatzClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ParkplatzClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
